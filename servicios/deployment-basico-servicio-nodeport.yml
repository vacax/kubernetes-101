apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: deployment-basico
  name: deployment-basico
spec:
  # Indica la cantidad de replicas que tendremos para el servicio.
  replicas: 4
  selector:
    matchLabels:
      # Selector para controlar los pods del deployments
      app: deployment-basico
  strategy: {}
  template: # La misma informaci칩n de los Pods.
    metadata:
      creationTimestamp: null
      labels:
        # Selector para utilizarlo en los servicios.
        app: deployment-basico
    spec:
      containers:
      - image: vacax/javalin-hola-mundo
        name: javalin-hola-mundo-deployment
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
        ports:
        - containerPort: 7000
          name: puerto-javalin
        resources:
          limits:
            cpu: 50m
            memory: 256M
          requests:
            cpu: 50m        
            memory: 256M
        livenessProbe:
          httpGet:
            path: /health
            port: puerto-javalin
status: {}

---

apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: deployment-basico
  name: servicio-deployment-basico
spec:
  # indicando el tipo de conexi칩n, en este caso NodePort
  type: NodePort
  ports:
    # Puerto que estamos exponiendo en el cluster
    - port: 7000
      protocol: TCP
      # Puerto que escucha nuestra aplicaci칩n en el contenedor.
      targetPort: 7000
      # Por defecto y por comodidad, el plano de control de Kubernetes asignar치 el puerto desde un rango (por defecto: 30000-32767)
      # nodePort: 30007
  selector:
    app: deployment-basico

status:
  loadBalancer: {}

